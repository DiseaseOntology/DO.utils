% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{glueV_cum}
\alias{glueV_cum}
\title{Cumulative String Interpolation}
\usage{
glueV_cum(..., .sep = "\\n", .envir = parent.frame(), max_iter = NULL)
}
\arguments{
\item{...}{Named strings where expression string(s) to format should be
named with the order in which they are to be processed (e.g. \code{1}, \code{2}, \code{3};
multiple expressions can be processed at the same level) and temporary
variables for substitution should be named to match the \verb{!<< >>!} delimited
variables in the expressions. Order the expressions strings to ensure that
temporary variables stack.}

\item{.sep}{[\code{character(1)}: \sQuote{""}]\cr Separator used to separate elements.}

\item{.envir}{[\code{environment}: \code{parent.frame()}]\cr Environment to evaluate each expression in. Expressions are
evaluated from left to right. If \code{.x} is an environment, the expressions are
evaluated in that environment and \code{.envir} is ignored. If \code{NULL} is passed, it is equivalent to \code{\link[=emptyenv]{emptyenv()}}.}

\item{max_iter}{The maximum number of iterations to run before stopping. If
\code{NULL}, will default to the number of named arguments passed to \code{...} minus
one. \code{max_iter} will always be set internally to a minimum of 2 to ensure
the case where temporary variables are found in the specified environment and
not passed as arguments is supported.}
}
\description{
Cumulative gluing with \code{\link[=glueV]{glueV()}} for rare cases where temporary variables are
found in other temporary variables.
}
\section{Note}{

\code{glueV_cum()} differs from \code{\link[glue:glue]{glue::glue()}} in producing an ERROR when no
expression strings are included in \code{...}, instead of simply returning an
empty \code{glue} object.
}

\examples{
glueV_cum(
  # unnamed expression strings
  'FILTER(lang(!<<object>>!) = "!<<lang>>!")',
  '?iri oboInOwl:has!<<syn_scope>>!Synonym ?!<<syn_scope>>!Synonym .',
  # named temporary variables
  object = "?!<<syn_scope>>!Synonym", # includes another temporary variable
  lang = "es",
  syn_scope = "Exact"
)

}
\keyword{internal}
