% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/key_management.R
\name{get_key}
\alias{get_key}
\title{Get a Key/Secret}
\usage{
get_key(key_name, ...)
}
\arguments{
\item{key_name}{The name of a key, as a string (case-sensitive). See
\verb{Common Keys} for a description tasks performed by DO.utils and the
the keys they require/use.}

\item{...}{
  Arguments passed on to \code{\link[keyring:key_get]{keyring::key_get}}
  \describe{
    \item{\code{service}}{Service name, a character scalar.}
    \item{\code{username}}{Username, a character scalar, or \code{NULL} if the key
is not associated with a username.}
    \item{\code{keyring}}{For systems that support multiple keyrings, specify
the name of the keyring to use here. If \code{NULL}, then the default
keyring is used. See also \code{\link[keyring:has_keyring_support]{has_keyring_support()}}.}
  }}
}
\value{
The value of the key/secret.
}
\description{
If available, retrieves a key/secret from \href{keyring::keyring}{keyring}
(preferred) or an environment variable. When not available requests the
key's value from the user and stores it for future use (using \code{keyring}).
}
\details{
Once per session this function will specify where the key was found, unless
one of two options is set:
\enumerate{
\item The global (and overriding) "DO.utils.key_msg" option will mute all
messages when \code{FALSE} or \emph{always} produce messages when \code{TRUE}.
\item A key specific option, defined as "DO.utils.key_msg.{key_name}", is set
to \code{FALSE}.
}
}
\section{Common Keys}{

Currently only "cited by" access (via \verb{citedby_*()}) and related article
summary searches (via \verb{search_*()}) require keys based on the service they
use:
\itemize{
\item PubMed/PMC require a key named "ENTREZ_KEY" (see NCBI's
\href{https://www.ncbi.nlm.nih.gov/books/NBK25497/}{Entrez API documentation}).
\item Scopus requires two keys named "Elsevier_API" and "Elsevier_insttoken".
This second key is a special "institutional token" provided by
Elsevier/Scopus that allows API access for non-standard use
cases, which includes use of \code{citedby_scopus()}.
}
}

