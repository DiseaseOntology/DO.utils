% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format.R
\name{format_axiom}
\alias{format_axiom}
\title{Format Logical Axioms}
\usage{
format_axiom(
  x,
  property_df = NULL,
  generify_obo = FALSE,
  placeholders = c("<<<", ">>>", "\%\%\%", "@@@"),
  max_phrases = 15L
)
}
\arguments{
\item{x}{Complete logical axioms in OWL functional syntax, as a character
vector.}

\item{property_df}{[Optional] A data.frame consisting of relevant annotation and object
properties that may be used to make properties more readable in axioms.
If provided, data.frame should include two columns:
\itemize{
\item \code{property}: Each property's URI.
\item \code{label}: Each property's \code{rdfs:label} (or equivalent).
}

\emph{See 'Formatting Options' for details.}}

\item{generify_obo}{Whether to make OBO ontology classes and properties
generic, as \code{TRUE} or \code{FALSE} (default). \emph{See 'Formatting Options' for}
\emph{details.}}

\item{placeholders}{A set of 4 strings that will be used internally to
preserve axiom parentheses \verb{[1:2]}, phrase spacing \verb{[3]}, and complete
phrases \verb{[4]}, as a character vector. These should not generally need to
be edited and are only exposed in case of conflicts within axioms.}

\item{max_phrases}{The maximum number of phrases to update in an axiom,
as an integer. This protects against an infinite while loops and would
only need to be edited if one or more \verb{Object*} OWL functional phrases
are returned unformatted.}
}
\description{
Format logical axioms in the style of Protege. Input axioms must be in OWL
functional syntax.
}
\section{Formatting Options}{

\code{format_axiom()} will always rearrange equivalent class and subclass of
logical axioms from OWL functional syntax to a more readable form, similar
to Protege. However, classes and properties in axioms will be returned as
URIs or CURIEs (as formatted in \code{x}). This may be desirable for further
programmatic examination but will still be difficult for a human to read.
To make them more readable, the \code{property_df} and \code{generify_obo} arguments
can be used.

\code{property_df} is used to replace OBO ontology property URIs or CURIEs
with namespace-prefixed labels: e.g. \code{obo:RO_0004026} would become
\code{RO:'disease has location'}. Non-OBO properties will not be modified.

\code{generify_obo} replaces individual OBO URIs or CURIEs with either
namespace-prefixed types, e.g. \code{obo:UBERON_0001032} would become
\code{UBERON:anatomy}, or namespace only. This format simplifies axioms making
basic analysis of axiom patterns easier. \emph{See the documentation for}
\emph{\code{\link[=generify_obo]{generify_obo()}} for details.}
}

