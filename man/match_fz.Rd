% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_fz.R
\name{match_fz}
\alias{match_fz}
\title{Fuzzy (Approximate) String Matching}
\usage{
match_fz(x, ref, method = "lcs", maxDist = 115, ...)
}
\arguments{
\item{x}{A character vector to find matches for.}

\item{ref}{A character vector to find matches from.}

\item{method}{Matching algorithm to use. See \code{\link[stringdist]{stringdist-metrics}}.}

\item{maxDist}{Elements in \code{x} will not be matched with elements of 
\code{table} if their distance is larger than \code{maxDist}. Note that the
maximum distance between strings depends on the method: it should always be
specified.}

\item{...}{arguments passed on to \code{\link[stringdist:amatch]{stringdist::amatch()}}}
}
\value{
A tibble with x, the reference most closely matching x, and the
distance between x and the reference match (based on the selected method);
columns = "x", "ref_match", "dist".
}
\description{
Wraps \code{\link[stringdist:amatch]{stringdist::amatch()}} to perform "fuzzy" (approximate) string
matching while providing more informative output. Instead of an integer
vector of best match positions, this function returns a tibble with the
input, its corresponding best match, and the approximate string distance.
}
\section{NOTES}{

Fuzzy string matching is \emph{SLOW}. Expect this function to take >1 min for
comparisons of more than 500 values for all methods.

For comparison of citation titles specifically, the "lcs" method is faster
than "osa" and seems to work better. Based on light experimentation, a good
setting for \code{maxDist} value for citation titles is between 80-115.
}

